<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crear el dialogo
dText = noone;
dSound = noone;
dFont = noone;
dFace = noone;
dColor = noone;
bColor = noone;
bSize = noone;
sleepTime = noone;
tVisible = "";
tPage = 0;
tCount = 0;
tMargin = 0; 
aLength = 0;
dMode = 0;
dWidth = 80;
dHeight = 40;
cString = dText[tPage];
rString = "";
lhsep = 60;
lvsep = 60;
dTextMaxW = 10;
lSpace = 0;
lCPage = -1;
fixed = true;
cfString = "";

if (dMode == 1)
{
    tMargin = tMargin + 6;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dibujar el dialogo
if (dText[tPage] != "")
{   
    draw_set_font(dFont[tPage]);
    var xx = x;
    var yy = y;
        
    if (dMode == 1)
    {
        draw_rectangle_color(xx, yy, dWidth, dHeight, bColor[tPage], bColor[tPage], bColor[tPage], bColor[tPage], false);
        draw_rectangle_color(xx + bSize[tPage], yy + bSize[tPage], dWidth - bSize[tPage], dHeight - bSize[tPage], dColor[tPage], dColor[tPage], dColor[tPage], dColor[tPage], false);
    }
    
    if (lCPage != tPage)
    {
        dTextMaxW = (((dWidth - (xx + bSize[tPage])) - (tMargin * 2)) - bSize[tPage]) - 50;
        cString = dText[tPage];
        
        for (var i = 1; i != string_length(cString) + 1; ++i)
        {
            if (string_char_at(cString, i) == "{" &amp;&amp; string_char_at(cString, i + 7) == "}")
            {
                i = i + 7;
            } else {
                rString = rString + string_char_at(cString, i);
            }
        }
        
        if (string_width(rString) &gt; dTextMaxW)
        {
            
            var j = 1;
            var tWords = "";
            var mChars = 0;
            var lSpace = 0;
            var tempJ = 1;
            var cCString = "";  
            
            for (var i = 1; i != string_length(rString); ++i)
            {              
                if (string_width(cCString) &gt; dTextMaxW) 
                {
                    mChars = string_length(cCString) - 1;
                    break;
                } else if (string_width(cCString) == (dTextMaxW - (tMargin * 2))) {
                    mChars = string_length(cCString);
                    break;
                }
                cCString = cCString + "c";
            }
            lSpace = 0;

            for (var cIndex = 1; cIndex != string_length(cString); ++cIndex)
            {   
                if ((string_length(rString) - tempJ) &lt;= mChars) break;
                
                for (var i = cIndex; i != string_length(cString); ++i)
                {
                    if (string_char_at(cString, i) == " ") lSpace = i;        
                    
                    if (string_char_at(cString, i) == "{" &amp;&amp; string_char_at(cString, i + 7) == "}")
                    {
                        i = i + 7;
                    } else {
                        if (j == mChars)
                        {
                            cString = string_delete(cString, lSpace, 1);
                            cString = string_insert("#", cString, lSpace);
                            j = 1;
                            cIndex = lSpace;
                            break;
                        }
                        ++j;
                        ++tempJ;
                    }
                }
            }
        } else {
            show_message("asd");
        }
        cfString = cString;
        lCPage = tPage;
    }

    if (tCount &lt;= string_length(cfString) &amp;&amp; string_char_at(cfString, tCount) != '' &amp;&amp; string_char_at(cfString, tCount) != ' ' &amp;&amp; string_char_at(cfString, tCount) != '#')
    {
        audio_play_sound(dSound[tPage], 0, false);
    }
    if (string_char_at(cfString, tCount) == "{" &amp;&amp; string_char_at(cfString, tCount + 7) == "}")
    {
        tCount = tCount + 8;    
        
        tVisible = string_copy(cfString, 0, tCount);
        formatText(xx + tMargin, yy + tMargin, tVisible, lhsep, lvsep, fixed);
    } else {
        tVisible = string_copy(cfString, 0, tCount); 
        formatText(xx + tMargin, yy + tMargin, tVisible, lhsep, lvsep, fixed);
        tCount = tCount + 1;
    }
    Sleep(sleepTime[tPage]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
