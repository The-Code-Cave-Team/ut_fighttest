<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crear el dialogo
dText = noone;
dSound = noone;
dFont = noone;
dFace = noone;
dColor = noone;
bColor = noone;
bSize = noone;
sleepTime = noone;
m3spr = noone;
imgSpd = noone;
fixed = noone;
dTextMaxW = noone;
dMode = noone;
dHeight = noone;
dWidth = noone;
lhsep = noone;
lvsep = noone;
tMargin = noone;
xPos = noone;
yPos = noone; 
Face = noone;
tVisible = "";
tPage = 0;
tCount = 0;
cString = dText[tPage];
rString = "";
lSpace = 0;
lCPage = -1;
cfString = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dibujar el dialogo
if (dText[tPage] != "")
{   
    draw_set_font(dFont[tPage]);
    x = xPos[tPage];
    y = yPos[tPage];
    
    var xx = x;
    var yy = y;
    
    if (dMode[tPage] == 1)
    {
        draw_rectangle_color(xx, yy, xx + dWidth[tPage], yy + dHeight[tPage], bColor[tPage], bColor[tPage], bColor[tPage], bColor[tPage], false);
        draw_rectangle_color(xx + bSize[tPage], yy + bSize[tPage], xx + dWidth[tPage] - bSize[tPage], yy + dHeight[tPage] - bSize[tPage], dColor[tPage], dColor[tPage], dColor[tPage], dColor[tPage], false);
    } else if (dMode[tPage] == 2) {
        draw_sprite(m3spr[tPage], 0, xx, yy);
    }
    
    if (lCPage != tPage)
    {
        cString = dText[tPage];
        rString = "";
        
        if (dMode[tPage] == 0)
        {
            dTextMaxW[tPage] = (dWidth[tPage] - xx);
            cString = dText[tPage];
        } else if (dMode[tPage] == 1) {
            if (dFace[tPage] != noone)
            {
                dTextMaxW[tPage] = (((((dWidth[tPage] - (xx + bSize[tPage])) - (tMargin[tPage] * 2)) - bSize[tPage]) - 50) - tMargin[tPage]) - sprite_get_width(dFace[tPage]) - 10;
            } else {
                dTextMaxW[tPage] = (((dWidth[tPage] - (xx + bSize[tPage])) - (tMargin[tPage] * 2)) - bSize[tPage]) - 70;
            }
        } else if (dMode == 2) {
            dTextMaxW[tPage] = dWidth[tPage] - xx;
        }
        for (var i = 1; i != string_length(cString) + 1; ++i)
        {
            if (string_char_at(cString, i) == "{" &amp;&amp; string_char_at(cString, i + 7) == "}")
            {
                i = i + 7;
            } else {
                rString = rString + string_char_at(cString, i);
            }
        }    
        
        if (string_width(rString) &gt; dTextMaxW[tPage])
        {
            var j = 1;
            var tWords = "";
            var mChars = 0;
            var lSpace = 0;
            var tempJ = 1;
            var cCString = "";  
            var cLine = 0;
            
            for (var i = 1; i != string_length(rString) + 1; ++i)
            {         
                if (string_width(string_copy(rString, 1, i)) &gt; dTextMaxW[tPage]) 
                {
                    mChars = i - 1;
                    break;
                }
            }
            
            
            lSpace = 0;
                  
            for (var cIndex = 1; cIndex != string_length(cString); ++cIndex)
            {   
                //if (fixed[tPage]) if ((string_length(rString) - tempJ) &lt;= (mChars)) break;
                //else if ((string_length(rString) - tempJ) &lt;= mChars) break;
                if ((string_length(rString) - tempJ) &lt;= mChars - 2)
                {
                    show_message("resta: " + string(string_length(rString) - tempJ)); 
                    show_message(string_copy(rString, string_length(rString) - tempJ, string_length(rString)));
                    break;
                }
                
                for (var i = cIndex; i != string_length(cString); ++i)
                {
                    if (string_char_at(cString, i) == " ") lSpace = i;        
                    
                    if (string_char_at(cString, i) == "{" &amp;&amp; string_char_at(cString, i + 7) == "}")
                    {
                        i = i + 7;
                    } else {
                        /*if (fixed[tPage])
                        {
                            if (cLine &gt; 0)
                            {*/
                                if (j &gt; mChars)
                                {
                                    cString = string_delete(cString, lSpace, 1);
                                    cString = string_insert("#", cString, lSpace);
                                    if(!(string_char_at(rString, tempJ) == " "))
                                    {
                                        for (var z = tempJ; z != 1; --z)
                                        {
                                            if (string_char_at(rString, z) == " ")
                                            {
                                                tempJ = z;
                                                show_message(string(tempJ));
                                                break;   
                                            }   
                                        }
                                        j = 1;
                                        ++cLine;
                                        cIndex = lSpace;
                                        break; 
                                    } else {
                                        show_debug_message(string(tempJ));
                                        j = 1;
                                        ++cLine;
                                        cIndex = lSpace;
                                        break;   
                                    }
                                }
                            /*} else {
                                if (j &gt; mChars)
                                {
                                    cString = string_delete(cString, lSpace, 1);
                                    cString = string_insert("#", cString, lSpace);
                                    j = 1;
                                    ++cLine;
                                    cIndex = lSpace;
                                    break;
                                } 
                            }
                        } else {
                            if (j &gt; mChars)
                            {
                                cString = string_delete(cString, lSpace, 1);
                                cString = string_insert("#", cString, lSpace);
                                j = 1;
                                ++cLine;
                                cIndex = lSpace;
                                break;
                            } 
                        }*/
                        ++tempJ;
                        ++j;
                    }
                }
            }
        }
        cfString = cString;
        lCPage = tPage;
    }
    draw_rectangle(dTextMaxW[tPage], yy, dTextMaxW[tPage] + 50, yy + 60, true);
    
    if (tCount &lt;= string_length(cfString) &amp;&amp; string_char_at(cfString, tCount) != '' &amp;&amp; string_char_at(cfString, tCount) != ' ' &amp;&amp; string_char_at(cfString, tCount) != '#')
    {
        audio_play_sound(dSound[tPage], 0, false);
    }
    if (string_char_at(cfString, tCount) == "{" &amp;&amp; string_char_at(cfString, tCount + 7) == "}")
    {
        tCount = tCount + 8;    
        
        tVisible = string_copy(cfString, 0, tCount);
        
        if (dMode[tPage] == 0)
        {
            formatText(xx, yy, tVisible, lhsep[tPage], lvsep[tPage], fixed[tPage]);
        } else if (dMode[tPage] == 1) {
            if (dFace[tPage] != noone)
            {
                formatText(xx + bSize[tPage] + sprite_get_width(dFace[tPage]) + tMargin[tPage], yy + bSize[tPage] + tMargin[tPage], tVisible, lhsep[tPage], lvsep[tPage], fixed[tPage]);
            } else {
                formatText(xx + tMargin[tPage], yy + tMargin[tPage], tVisible, lhsep[tPage], lvsep[tPage], fixed[tPage]);
            }
        } else if (dMode[tPage] == 2) {
            formatText(xx, yy, tVisible, lhsep[tPage], lvsep[tPage], fixed[tPage]);
        }
    } else {
        tVisible = string_copy(cfString, 0, tCount); 
        
        if (dMode[tPage] == 0)
        {
            formatText(xx, yy, tVisible, lhsep[tPage], lvsep[tPage], fixed[tPage]);
        } else if (dMode[tPage] == 1) {
            if (dFace[tPage] != noone)
            {
                formatText(xx + bSize[tPage] + sprite_get_width(dFace[tPage]) + tMargin[tPage], yy + bSize[tPage] + tMargin[tPage], tVisible, lhsep[tPage], lvsep[tPage], fixed[tPage]);
            } else {
                formatText(xx + tMargin[tPage], yy + tMargin[tPage], tVisible, lhsep[tPage], lvsep[tPage], fixed[tPage]);
            }
        } else if (dMode[tPage] == 2) {
            formatText(xx, yy, tVisible, lhsep[tPage], lvsep[tPage], fixed[tPage]);
        }
        
        tCount = tCount + 1;
    }
    Sleep(sleepTime[tPage]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
